install.packages("tidyverse")
install.packages("lubridate")
library(tidyverse)
library(lubridate)
today()
now()
directory()
dir()
head(diamonds)
str(diamonds)
glimpse(diamonds)
colnames(diamonds)
rename(diamonds, carat_new = carat)
rename(diamonds, carat_new = carat, cut_new = cut)
summarize(diamonds, mean_carat = mean(carat))
ggplot(data = diamonds, aes(x = carat, y = price)) +
geom_point()
ggplot(data = diamonds, aes(x = carat, y = price, color = cut)) +
geom_point()
ggplot(data = diamonds, aes(x = carat, y = price, color = cut)) +
geom_point() +
facet_wrap(~cut)
installed.packages
installed.packages()
install.packages("here")
install.packages("skimr")
installed.packages()
install.packages("dplyr")
setwd("/Users/gianluca_astudillo/Documents/GitHub/R-Case-Study") # set my directory
library(tidyverse)
x1 = read.csv("Group_1.csv") # x1 is group 1 data
setwd("/Users/gianluca_astudillo/Documents/GitHub/RSMAES_Internship_Analysis")
x1 = read.csv("Group_1.csv") # x1 is group 1 data
x2 = read.csv("Group_2.csv") # x2 is group 2 data
inds = seq(as.Date("2018-01-01"), as.Date("2022-06-30"), by = "day") # created this index to help organize the next line, update as needed
inds2 = seq(as.Date("2018-01-01"), as.Date("2022-06-30"), by = "month") # will need monthly index in the next step
G1_ts = ts(x1$Water.Temperature, start = c(2018, as.numeric(format(inds[1], "%j"))), frequency = 365) # creates a time series of water temp data (daily)
plot(G1_ts, xlab = "Time", ylab = "Water Temperature (C)", main = "Group 1 Daily Water Temperature Over Time (Non-Interpolated)") # Visually, there does seem to be a consistent drop in water temp at the start of the year;
# There are NAs in our data; to complete the rest of this process, we need to first interpolate to fill in any missing values.
# This will effect our findings and it must be noted in our results/discussion
G1_tsint = na.approx(G1_ts) # this will fill any NA values in our data through interpolation
plot(G1_tsint, xlab = "Time", ylab = "Water Temperature (C)", main = "Group 1 Daily Water Temperature Over Time (Interpolated)") # The holes in the data are gone now, ready to proceed
decompose_G1_tsint = decompose(G1_tsint, "additive") # This function will do all of the work for us in terms of extracting seasonality
plot(decompose_G1_tsint$seasonal) # this is the important one! This shows us the seasonal fluctuations of our data
plot(decompose_G1_tsint$trend) # this tells us the general trend of our overall data ; seems like water temp is going down over all (slightly)
plot(decompose_G1_tsint$random) # this tells us demonstrates the random noise in our data
plot(decompose_G1_tsint) # All graphs in 1 plot
adjust_G1_tsint =  G1_tsint - decompose_G1_tsint$seasonal # this is our seasonally adjusted data (subtract seasonal variation from observed data)
plot(adjust_G1_tsint, xlab = "Time", ylab = "Water Temperature (C)", main = "Group 1 Daily Water Temperature Over Time (Adjusted)") # plots adjusted data as a time series
# Now that we have our seasonally adjusted data, we need to add this data to x1
ad.Water.Temperature1 = as.data.frame(adjust_G1_tsint)
x1$ad.Water.Temperature = ad.Water.Temperature1
adjust_G1_tsint =  G1_tsint - decompose_G1_tsint$seasonal # this is our seasonally adjusted data (subtract seasonal variation from observed data)
decompose_G1_tsint = decompose(G1_tsint, "additive") # This function will do all of the work for us in terms of extracting seasonality
# There are NAs in our data; to complete the rest of this process, we need to first interpolate to fill in any missing values.
# This will effect our findings and it must be noted in our results/discussion
G1_tsint = na.approx(G1_ts) # this will fill any NA values in our data through interpolation
# First we have to load libraries we'll need for this analysis and import our data; if you dont have these download them!
library(tidyverse)
library(mosaic)
library(fpp)
library(ggplot2)
library(tseries)
library(vegan)
library(rstatix)
library(coin)
library(NSM3)
inds = seq(as.Date("2018-01-01"), as.Date("2022-06-30"), by = "day") # created this index to help organize the next line, update as needed
inds2 = seq(as.Date("2018-01-01"), as.Date("2022-06-30"), by = "month") # will need monthly index in the next step
G1_ts = ts(x1$Water.Temperature, start = c(2018, as.numeric(format(inds[1], "%j"))), frequency = 365) # creates a time series of water temp data (daily)
plot(G1_ts, xlab = "Time", ylab = "Water Temperature (C)", main = "Group 1 Daily Water Temperature Over Time (Non-Interpolated)") # Visually, there does seem to be a consistent drop in water temp at the start of the year;
# There are NAs in our data; to complete the rest of this process, we need to first interpolate to fill in any missing values.
# This will effect our findings and it must be noted in our results/discussion
G1_tsint = na.approx(G1_ts) # this will fill any NA values in our data through interpolation
plot(G1_tsint, xlab = "Time", ylab = "Water Temperature (C)", main = "Group 1 Daily Water Temperature Over Time (Interpolated)") # The holes in the data are gone now, ready to proceed
decompose_G1_tsint = decompose(G1_tsint, "additive") # This function will do all of the work for us in terms of extracting seasonality
plot(decompose_G1_tsint$seasonal) # this is the important one! This shows us the seasonal fluctuations of our data
plot(decompose_G1_tsint$trend) # this tells us the general trend of our overall data ; seems like water temp is going down over all (slightly)
plot(decompose_G1_tsint$random) # this tells us demonstrates the random noise in our data
plot(decompose_G1_tsint) # All graphs in 1 plot
adjust_G1_tsint =  G1_tsint - decompose_G1_tsint$seasonal # this is our seasonally adjusted data (subtract seasonal variation from observed data)
plot(adjust_G1_tsint, xlab = "Time", ylab = "Water Temperature (C)", main = "Group 1 Daily Water Temperature Over Time (Adjusted)") # plots adjusted data as a time series
# Now that we have our seasonally adjusted data, we need to add this data to x1
ad.Water.Temperature1 = as.data.frame(adjust_G1_tsint)
x1$ad.Water.Temperature = ad.Water.Temperature1
G2_ts = ts(x2$Water.Temperature, start = c(2018, as.numeric(format(inds[1], "%j"))), frequency = 365)
plot(G2_ts, xlab = "Time", ylab = "Water Temperature (C)", main = "Group 2 Daily Water Temperature Over Time (Raw)") # Visually, there does seem to be a consistent drop in water temp at the start/end of the year;
G2_tsint = na.approx(G2_ts) # this will fill in any NA values in our data through interpolation
plot(G2_tsint, xlab = "Time", ylab = "Water Temperature (C)", main = "Group 2 Daily Water Temperature Over Time (Unadjusted)") # The holes in the data are gone now, ready to proceed
plot(G2_ts, xlab = "Time", ylab = "Water Temperature (C)", main = "Group 2 Daily Water Temperature Over Time (Raw)") # Visually, there does seem to be a consistent drop in water temp at the start/end of the year;
G2_tsint = na.approx(G2_ts) # this will fill in any NA values in our data through interpolation
plot(G2_tsint, xlab = "Time", ylab = "Water Temperature (C)", main = "Group 2 Daily Water Temperature Over Time (Unadjusted)") # The holes in the data are gone now, ready to proceed
decompose_G2_tsint = decompose(G2_tsint, "additive") # This function will do all of the work for us in terms of extracting seasonality
plot(decompose_G2_tsint$seasonal) # this is the important one! This tells us the seasonal fluctuations of our data
plot(decompose_G2_tsint$trend) # this tells us the general trend of our overall data ; seems like water temp is going down over all (slightly)
plot(decompose_G2_tsint$random) # this tells us demonstrates the random noise in our data
plot(decompose_G2_tsint) # All graphs in 1 plot
adjust_G2_tsint =  G2_tsint - decompose_G2_tsint$seasonal
plot(adjust_G2_tsint, xlab = "Time", ylab = "Water Temperature (C)", main = "Group 2 Daily Water Temperature Over Time (Adjusted)")
ad.Water.Temperature2 = as.data.frame(adjust_G2_tsint)
x2$ad.Water.Temperature = ad.Water.Temperature2
inds = seq(as.Date("2018-01-01"), as.Date("2022-06-30"), by = "day") # created this index to help organize the next line, update as needed
inds2 = seq(as.Date("2018-01-01"), as.Date("2022-06-30"), by = "month") # will need monthly index in the next step
G1_ts = ts(x1$Water.Temperature, start = c(2018, as.numeric(format(inds[1], "%j"))), frequency = 365) # creates a time series of water temp data (daily)
plot(G1_ts, xlab = "Time", ylab = "Water Temperature (C)", main = "Group 1 Daily Water Temperature Over Time (Non-Interpolated)") # Visually, there does seem to be a consistent drop in water temp at the start of the year;
adjust_G2_tsint =  G2_tsint - decompose_G2_tsint$seasonal
plot(adjust_G2_tsint, xlab = "Time", ylab = "Water Temperature (C)", main = "Group 2 Daily Water Temperature Over Time (Adjusted)")
ad.Water.Temperature2 = as.data.frame(adjust_G2_tsint)
x2$ad.Water.Temperature = ad.Water.Temperature2
# First thing we wanna do is convert our holding tank data into a numeric value we can use
x1$Tank = gsub("MAT", "", as.character(x1$Tank)) # Removes characters from tank column so we can work w numbers
x1$Tank = as.numeric(x1$Tank) # convert from character to numeric values
#Now we can make the matrix and start adding stuff to it
matrix_dataG1 = matrix(nrow=54, ncol =4) # need 54 rows x 4 columns (year, month, avg water temp, # spawns)
# Note: we are only including data up to June 2022, so we will only require 54 rows, change this value as needed
for (i in 1:5) # i represent number of years we have of data; 2018-2022 = 5 (adjust as needed)
{
yr = x1[x1$Year == 2017 + i, ] # subset by year, iterating through i
for (j in 1:12)# j represents number of months in a year
{
mon = yr[yr$Month == j, ] # subset by month, iterating through j
matrix_dataG1[12*i - 12 + j , 1 ] = 2017 + i # adds years to matrix
matrix_dataG1[12*i - 12 + j , 2] = j # adds month to matrix
#matrix_dataG1[12*i - 12 + j, 3] = mean(mon$Water.Temperature, na.rm = TRUE) # avg monthly water temp to matrix
matrix_dataG1[12*i - 12 + j, 3] = mean(mon$ad.Water.Temperature$x) # avg monthly water temp to matrix using seasonally adjusted data
matrix_dataG1[12*i - 12 + j, 4] = sum(mon$Spawn, na.rm = TRUE) # monthly total spawns to matrix
# na.rm will ignore the NA values so we dont get an error
# will get an out of bounds error bc we dont have all the data for 2022
}
}
# Now we do the same thing for group 2
x2$Tank = gsub("MAT", "", as.character(x2$Tank)) # Removes characters from tank column so we can work w numbers
x2$Tank = as.numeric(x2$Tank) # convert from character to numeric values
matrix_dataG2 = matrix(nrow=54, ncol =4) # need 54 rows x 4 columns (month, year, avg water temp, # spawns)
for (i in 1:5) # i represent number of years we have of data; 2018-2021 = 5 (change as needed)
{
yr = x2[x2$Year == 2017 + i, ] # subset by year, iterating through i
for (j in 1:12)# j represents number of months in a year
{
mon = yr[yr$Month == j, ] # subset by month, iterating through j
matrix_dataG2[12*i - 12 + j , 1 ] = 2017 + i
matrix_dataG2[12*i - 12 + j , 2] = j # adds month to matrix
#matrix_dataG2[12*i - 12 + j, 3] = mean(mon$Water.Temperature, na.rm = TRUE) # avg monthly water temp to matrix (not used)
matrix_dataG2[12*i - 12 + j, 3] = mean(mon$ad.Water.Temperature$x) # avg monthly water temp to matrix using seasonally adjusted data
matrix_dataG2[12*i - 12 + j, 4] = sum(mon$Spawn, na.rm = TRUE) # monthly total spawns to matrix
# na.rm will ignore the NA values
# will get an out of bounds error bc we dont have all the data for 2022
}
}
# We have to check for the normal distribution of our data to determine if we should
# use parametric or non-parametric tests
shapiro.test(matrix_dataG1[,3]) # normality test for group 1 monthly water temp
shapiro.test(matrix_dataG1[,4]) # normality test for group 1 monthly spawn frequency
plot(adjust_G1_tsint, xlab = "Time", ylab = "Water Temperature (C)", main = "Group 1 Daily Water Temperature Over Time (Adjusted)") # plots adjusted data as a time series
plot(adjust_G2_tsint, xlab = "Time", ylab = "Water Temperature (C)", main = "Group 2 Daily Water Temperature Over Time (Adjusted)")
G1_ts = ts(x1$Water.Temperature, start = c(2018, as.numeric(format(inds[1], "%j"))), frequency = 365) # creates a time series of water temp data (daily)
plot(G1_ts, xlab = "Time", ylab = "Water Temperature (C)", main = "Group 1 Daily Water Temperature Over Time (Non-Interpolated)") # Visually, there does seem to be a consistent drop in water temp at the start of the year;
plot(decompose_G1_tsint) # All graphs in 1 plot
plot(decompose_G1_tsint) # All graphs in 1 plot
plot(decompose_G2_tsint) # All graphs in 1 plot
